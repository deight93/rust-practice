// 구조체에서는 그 구성원으로 참조자를 가지고 있는 경우 무조건 해당 구조체에 대해 라이프타임을 표기해줘야 한다.
// 아래는 그 예다.
struct Person<'a> {
    name: &'a str,
    num: i32,
}

// #[derive(Debug)]
// struct Point<'a> {
//     x: &'a i32,
//     y: &i32,
// }

// 튜플 구조체에서의 라이프타임 표기
#[derive(Debug)]
struct Borrowed<'a>(&'a i32);
// 튜플 구조체에서도 해당 튜플 구성원에 참조자가 있으면 반드시 라이프타임 표기를 해줘야한다.

// 구조체를 구현할 때의 라이프타임 표기
// 라이프타임 표기가 사용된 구조체를 impl 할 때는 impl 키워드 뒤에도 해당 라이프타임을 표기해야 한다.
// 해당 구조체의 라이프타임 파라미터를 impl에서도 정의해야하기 때문이다.

/*
구조체에 대한 impl에서 메서드를 구현할 때는 일반 함수에서의 라이프타임 표기 방법과 유사하다.

1)리턴 타입이 참조자 형태가 아니면 라이프타임 표기 필요 없다.
2)리턴 타입이 self에 있는 구성원에 대한 참조자이면, 라이프타임 표기를 생략할 수 있다.
리턴값에 대한 라이프타임이 self의 라이프타임 매개변수와 같게 된다.
3)리턴 타입이 참조자 형태이고 위의 2~3번 케이스가 아니면 라이프타임 표기를 해야한다.
3-1)리턴 타입이 참조자 형태가 아니면 라이프타임 표기 필요 없다.
 */

struct Person2<'a> {
    name: &'a str,
    age: i32,
}
impl<'a> Person2<'a> {
    // self.age를 리턴하는 get_age라는 메서드를 만든다면, 라이프타임 표기를 할 필요 없다. 리턴 타입이 참조자가 아니기에
    fn get_age(&self) -> i32 {
        self.age
    }
    // 리턴 타입이 self에 있는 구성원에 대한 참조자이면, 라이프타임 표기를 생략할 수 있다.
    // 리턴값에 대한 라이프타임이 self의 라이프타임 매개변수와 같게 된다.
}

fn main() {
    // let x1 = 10;
    // let p;
    // {
    //     let y1 = 20;
    //     p = Point { x: &x1, y: &y1 };
    // }
    // println!("point = {:?}", p);

    // 에러가 나는 이유는 Point 객체인 p가 그 구성원인 x, y의 수명주기에 영향을 받는다고
    // Point 객체를 선언할 때 라이프타임 표기를 했는데,
    // main 함수에서 보면 p는 x, y 중 짧은 수명주기인 y에 영향을 받기에 블록이 끝나면 p의 수명이 다한다.
    // 그런데, 블록 밖에서 p를 출력하려고 했기에 에러가 나는 것

    // Rust는 구조체를 선언할 때 모든 참조자 형태의 구성원에 라이프타임 매개변수 지정을 강제하고 있기에 에러가 나는 것이고,
    // 그렇기에 라이프타임 매개변수를 잘 못 지정해서 댕글링 포인터를 컴파일러가 못 잡아내는 경우는 없다.
    // 왜냐면, Point 구조체의 예에서 y에 대해 라이프타임 매개변수를 x와 같게 하던 다르게 하건 지정해야하고,
    // 이렇게 각 구성원들에게 지정된 매개변수들에 대해서 Point 구조체는
    // 가장 짧은 라이프타임보다 길지 않도록 보수적으로 설정되기 때문

    let x = 10;
    let b = Borrowed(&x);

    println!("borrowed: {}", b.0);
}

/*
핵심은, 구조체의 구성원 중에 참조자가 있으면 반드시 라이프타임 표기를 해야하고,
이때 구조체 객체의 수명은 구성원의 수명보다 길지 않게 된다는 점이다.

즉, 구성원 중 하나라도 수명이 다하게되면, 그 이후에 이 구조체 객체로의 접근에 대해서는 컴파일러가 에러를 내게낸다.

이러한 목적으로 Rust에서는 프로그래머에게 직접 구조체에 대한 라이프타임 표기를 하게 한다.

구조체에 대해 impl을 통해 구현을 할 때도, 해당 구조체가 라이프타임을 사용하는 구조체라면
impl에서도 해당 라이프타임을 표기해줘야 한다.

impl에서 메서드를 구현할 때에도 일반 함수에서와 동일하게 라이프타임 표기가 필요할 때는 해줘야 한다.
즉, 메서드가 참조자를 리턴할 때에 해당하고,
해당 리턴값의 라이프타임 매개변수를 입력 파라미터의 어느 것에 맞춰야할 지 컴파일러로서는 판단할 수 없을 때,
프로그래머가 수동으로 입력해줘야 한다.
 */
