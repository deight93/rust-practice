fn main() {
    //B. copy가 이루어지는 경우

    let a1 = 10;
    let a2 = a1;

    println!("a1: {}", a1);
    println!("a2: {}", a2);

    // let a2=a1에 의해서 move가 일어날까 아니면 copy가 일어날까?

    // 하나의 메모리 영역에 대해서는 오직 한 개의 변수만이 소유권을 가질 수 있다고 했는데,
    // let a2=a1이라고 한 이후에도 소유권이 이동하지 않은 것인가?
    //
    // 그렇다. 소유권 이동이 발생하지 않았다. 그 이유는, a1이 힙 메모리를 사용하는 변수가 아니기 때문이다.
    // let a1=10으로 되어 있기에 a1은 기본 타입(Primitive type)인 변수다. 따라서, '힙'이 아니라 '스택'만을 사용한다.
    //
    // Rust에서 기본 타입인 변수들이 다른 변수에 할당 될 때는 값이 복사되어 할당된다.

    /*
    - let a2=a1에 의해서, a1에 해당하는 데이터가 복사되고, 복사된 데이터가 a2에 할당된다.
    - 따라서, a1과 a2는 같은 값을 가진 다른 메모리 영역을 각각 가리키고 있다.
    - 따라서, let a2=a1을 한 후에 a1값을 읽어도 에러가 발생하지 않는다.
     */

    // ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** *****
    // Rust에서의 '소유권 이동' 규칙은 '힙 메모리를 사용하는 변수'에만 적용되는 규칙이고,
    // '스택을 사용하는 원시형 변수'에는 해당되지 않는 규칙
    // ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** *****
}
