fn main() {
    // 예제 1. 문자열에 있는 숫자문자를 숫자로 변환하기
    // 아래 문자열을 입력받아서 u64 타입 벡터를 리턴하는 함수 get_num_vector를 만드세요.
    // 만약 문자열 중간에 숫자로 변환할 수 없는 문자가 있는 경우는 해당 문자는 무시하시오.
    const INPUT1: &str = "
        a3167176531330624919225119674426574742355349194934
        b6983520312774506326239578318016984801869478851843
        c5861560789112949495459501737958331952853208805511
    ";
    let v = get_num_vector(INPUT1);
    assert_eq!(vec![3, 1, 6, 7, 1], &v[0..5]);
    println!("{:?}", v);

    // 예제 2. 라인단위 읽기
    // 다섯 줄의 문자열을 읽고, 각 줄에 있는 문자열 중 앞에서 2개의 숫자형태의 문자를 전부 더하는 함수를 만드시오.
    // 문자열에서 가장 앞에 있는 두 개 숫자를 이용해서 2자리의 정수를 만드는 것이다.
    // 각 라인에는 앞 뒤로 공백이 있을 수 있으니 공백을 없애야 한다.
    const INPUT2: &str = r"37107287533902102798797998220837590246510135740250
    46376937677490009712648124896970078050417018260538
    74324986199524741059474233309513058123726617309629
    91942213363574161572522430563301811072406154908250
    23067588207539346171171980310421047513778063246676";

    let sum = cal_sum(INPUT2);
    assert_eq!(271, sum);
    println!("{}", sum);

    // 예제 3. 숫자 변환 후 짝수만 더하기
    let input3: &str = "73167176531330624919225119674426574742355349194934";
    let sum: u32 = input3
        .chars()
        .filter_map(|c| c.to_digit(10))
        .filter_map(|x| if x % 2 == 0 { Some(x) } else { None })
        .sum(); // 이 부분을 짜면 됨
    assert_eq!(72, sum);
    println!("{}", sum);
}

fn get_num_vector(s: &str) -> Vec<u64> {
    // 문자열에서 문자들을 뽑아내는 것은 chars() 메서드다.
    // 각 문자를 십진수로 변환하는 것은 c.to_digit(10).
    // 유의할 것은 이 메서드가 Option 타입 리턴이기에 Some 타입의 리턴값에 대해서만 처리하면 된다는 점.
    // 문제에서 숫자로 변환하다고 실패하는 것은 무시하라고 했기 때문

    s.chars() //1. string을 char 배열로 변환
        .filter_map(|c| c.to_digit(10)) //2. 십진수 숫자로 변환. 에러 무시
        .map(|d| d as u64) //3. u64로 변환. b/c 최종결괏값이 u64형태 리턴
        .collect::<Vec<u64>>() //4. Vector로 변환
}

fn cal_sum(s: &str) -> u64 {
    // parse 메서드를 쓸 때 어떤 숫자형 타입으로 변환할 지는 '터보피시(turbofish)' 문법을 사용하면 된다.
    // parse::<64>() ::< >라는 형태가 가자미(turbot)와 비슷한 형태라서, 이러한 것을 Rust에서 turbofish
    s.lines()
        .map(|line| line.trim()) // 라인에 앞과 뒤에 있는 공백을 없애기 위해 line.trim()을 사용
        .map(|line| &line[0..2]) // 각 줄의 앞에 2개 숫자만을 이용할 것이기에 문자열 슬라이스를 하면된다. &line[0..2]
        .filter_map(|s| s.parse::<u64>().ok()) // 숫자로된 문자열을 숫자로 변환하기 위해서는 parse() 메서드
        .sum()
}
