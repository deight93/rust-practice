fn main() {
    // &str과 String의 두 개의 차이를 저장되는 메모리 위치와 소유권(ownership) 관점
    // Rust에서 어떤 변수를 선언하면, 그 변수의 정보는 모두 스택 메모리에 저장
    // &str과 String 타입 변수도 그 정보는 스택에 저장
    // &str에서의 실제 값인 문자들 값은 프로그램이 실행될 때 미리 확보된 특수한 읽기 전용 메모리에 적재된다.
    // &str 변수의 스택 정보는 그 문자들 값이 저장된 메모리 위치만을 가지고 있는 것
    // String은, 문자들 값이 힙 공간에 위치하는 것이고, 힙 공간의 특성이 메모리 사용공간을 더 확대/축소 할 수 있는 것이기에,
    // 문자들을 위한 공간을 더 늘리거나 축소 시킬 수 있다.

    // person은 &srt 타입이다. 고정된 문자열이고, 이 문자들 정보는 프로그램 실행파일 내부에 저장되어 있다가
    // 프로그램이 실행될 때 주 메모리(RAM)의 read-only 영역에 저장
    // 이 영역을 접근한다는 것은 소유권을 획득해서 접근할 수는 없고, 참조 주소 형태로 접근. 그래서 &가 붙는다.
    let person = "Rust";

    //phon_num은 String 타입이다. 실제 문자 값인 "010-1234-5678"은 힙 메모리에 저장
    // 힙 메모리는 프로그램이 실행되면서 확보된 영역을 확대/축소할 수 있다.
    let phone_number = "010-1234-5678";

    // num4는 String 타입 문자열의 일부를 슬라이스한 것을 레퍼런싱한다.
    // 이처럼 문자열에 대한 슬라이스를 Rust에서는 &str 타입으로 처리한다.
    let num4 = &phone_number[8..];
    println!("{} {}", person, num4);

    // 배열과 벡터의 관계는, 배열은 고정된 크기의 순차적인 데이터 저장소이고,
    // 벡터는 배열처럼 순차적 데이터 구조인데 그 크기를 확대/축소할 수 있다.

    // Rust에서는 문자열에 대해서 고정된 문자열은 &str로, 가변 크기 문자열에 대해서는 String으로 처리하게한 것이다.
    // 이렇게 함으로써 좀 더 효율적으로 문자열을 다룰 수 있게 해준다.
    // 만약 크기가 불변인 문자열에 대해서는 &str로 정의해서 사용하면, 어디에선가 이 문자열을 바꾸려는 시도가 실패할 것이다.
    // 좀 더 프로그래머가 의도한 대로 프로그램이 동작되는 것을 보장해 준다.
}
